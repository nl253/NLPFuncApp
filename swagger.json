{
  "swagger": "2.0",
  "info": {
    "title": "NLP",
    "version": "1.0",
    "description": "Natural Language Processing API."
  },
  "host": "nlp-apim.azure-api.net",
  "produces": [
    "application/json",
    "text/plain"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [{"apiKeyHeader": []}, {"apiKeyQuery": []}],
  "responses": {
    "Int": {
      "description": "",
      "examples": {
        "application/json": 123
      },
      "schema": {
        "$ref": "#/definitions/Int"
      }
    },
    "Float": {
      "description": "",
      "examples": {
        "application/json": 0.123
      },
      "schema": {
        "$ref": "#/definitions/Float"
      }
    },
    "Number": {
      "description": "",
      "examples": {
        "application/json": 0.123
      },
      "schema": {
        "$ref": "#/definitions/Number"
      }
    },
    "Array Of Strings": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Array Of Strings"
      },
      "headers": {
        "Content-Type": {
          "type": "string",
          "enum": [
            "application/json"
          ]
        }
      },
      "examples": {
        "application/json": [
          "Tom",
          "Amy",
          "John"
        ]
      }
    },
    "Html": {
      "examples": {
        "text/html": "<p>some</p>"
      },
      "headers": {
        "Content-Type": {
          "type": "string",
          "enum": [
            "text/html"
          ]
        }
      },
      "description": "",
      "schema": {
        "$ref": "#/definitions/Text"
      }
    },
    "Text": {
      "examples": {
        "text/plain": "alslkedfj alsdfaslkd falskdf kasdf "
      },
      "headers": {
        "Content-Type": {
          "type": "string",
          "enum": [
            "text/plain"
          ]
        }
      },
      "description": "",
      "schema": {
        "$ref": "#/definitions/Text"
      }
    },
    "Counts": {
      "description": "",
      "examples": {
        "application/json": {
          "ab": 2,
          "bcd": 34
        }
      },
      "headers": {
        "Content-Type": {
          "type": "string",
          "enum": [
            "application/json"
          ]
        }
      },
      "schema": {
        "$ref": "#/definitions/Counts Response Body"
      }
    },
    "Regex": {
      "description": "",
      "headers": {
        "Content-Type": {
          "type": "string",
          "enum": [
            "application/json"
          ]
        }
      },
      "examples": {
        "application/json": [
          "mary",
          "tom",
          "susan"
        ]
      },
      "schema": {
        "$ref": "#/definitions/Regex Response Body"
      }
    },
    "Error": {
      "description": "",
      "examples": {
        "200": "something went wrong"
      },
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "headers": {
        "Content-Type": {
          "enum": [
            "text/plain"
          ],
          "type": "string"
        }
      }
    }
  },
  "paths": {
    "/mdToHtml": {
      "post": {
        "description": "Markdown to HTML",
        "operationId": "post-mdtohtml",
        "summary": "Markdown to HTML",
        "tags": [
          "nlp",
          "markdown",
          "html",
          "conversion"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/html",
          "text/xhtml"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Html"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "text/html"
        ]
      }
    },
    "/define/{word}": {
      "get": {
        "description": "Define",
        "operationId": "get-define",
        "summary": "Define",
        "tags": [
          "nlp",
          "dictionary"
        ],
        "parameters": [
          {
            "name": "word",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Text"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "404": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/counts": {
      "post": {
        "description": "Counts",
        "operationId": "post-counts",
        "summary": "Counts",
        "tags": [
          "nlp",
          "regex"
        ],
        "parameters": [
          {
            "name": "counts Request Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Regex Request Body"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Counts"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/regexAll": {
      "post": {
        "description": "Regex All",
        "operationId": "post-regexall",
        "summary": "Regex All",
        "tags": [
          "nlp",
          "regex"
        ],
        "parameters": [
          {
            "name": "regex Request Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Regex Request Body"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Regex"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/regex": {
      "post": {
        "description": "Regex",
        "operationId": "post-regex",
        "summary": "Regex",
        "tags": [
          "nlp",
          "regex"
        ],
        "parameters": [
          {
            "name": "Regex Request Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Regex Request Body"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Regex"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/compromise": {
      "post": {
        "description": "Compromise",
        "operationId": "post-compromise",
        "summary": "Compromise",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "compromise Request Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Compromise Request Body"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/verbs": {
      "post": {
        "description": "Verbs",
        "operationId": "verbs",
        "summary": "Verbs",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/organizations": {
      "post": {
        "description": "Organizations",
        "operationId": "organizations",
        "summary": "Organizations",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/places": {
      "post": {
        "description": "Places",
        "operationId": "places",
        "summary": "Places",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/people": {
      "post": {
        "description": "People",
        "operationId": "people",
        "summary": "People",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/nouns": {
      "post": {
        "description": "Nouns",
        "operationId": "nouns",
        "summary": "Nouns",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/quotations": {
      "post": {
        "description": "Quotations",
        "operationId": "quotations",
        "summary": "Quotations",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/phoneNumbers": {
      "post": {
        "description": "Phone Numbers",
        "operationId": "phoneNumbers",
        "summary": "Phone Numbers",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/urls": {
      "post": {
        "description": "Urls",
        "operationId": "urls",
        "summary": "Urls",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/contractions": {
      "post": {
        "description": "Contractions",
        "operationId": "contractions",
        "summary": "Contractions",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/acronyms": {
      "post": {
        "description": "Acronyms",
        "operationId": "acronyms",
        "summary": "Acronyms",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/topics": {
      "post": {
        "description": "Topics",
        "operationId": "topics",
        "summary": "Topics",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/hashTags": {
      "post": {
        "description": "Hash Tags",
        "operationId": "hashTags",
        "summary": "Hash Tags",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/possessives": {
      "post": {
        "description": "Possessives",
        "operationId": "possessives",
        "summary": "Possessives",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/clauses": {
      "post": {
        "description": "Clauses",
        "operationId": "clauses",
        "summary": "Clauses",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/adverbs": {
      "post": {
        "description": "Adverbs",
        "operationId": "adverbs",
        "summary": "Adverbs",
        "tags": [
          "nlp",
          "compromise"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Text"
            }
          }
        ],
        "consumes": [
          "text/plain",
          "text/markdown",
          "text/*"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/ngrams": {
      "post": {
        "description": "Ngrams",
        "operationId": "ngrams",
        "summary": "Ngrams",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "n": {
                  "$ref": "#/definitions/Int"
                },
                "text": {
                  "$ref": "#/definitions/Text"
                },
                "tokens": {
                  "$ref": "#/definitions/Array Of Strings"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/tokenize": {
      "post": {
        "description": "Tokenize",
        "operationId": "tokenize",
        "summary": "Tokenize",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "required": ["text"],
              "properties": {
                "flags": {
                  "type": "string"
                },
                "regex": {
                  "type": "string"
                },
                "tokenizer": {
                  "enum": [
                    "OrthographyTokenizer",
                    "RegexpTokenizer",
                    "CaseTokenizer",
                    "AggressiveTokenizer",
                    "SentenceTokenizer",
                    "TreebankWordTokenizer",
                    "WordPunctTokenizer",
                    "WordTokenizer"
                  ]
                },
                "text": {
                  "$ref": "#/definitions/Text"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/sentiment": {
      "post": {
        "description": "Sentiment",
        "operationId": "sentiment",
        "summary": "Sentiment",
        "tags": [
          "nlp",
          "natural"
        ],
        "consumes": ["application/json"],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["tokens"],
              "properties": {
                "tokens": {
                  "$ref": "#/definitions/Array Of Strings"
                },
                "vocabulary": {
                  "enum": [
                    "afinn",
                    "senticon",
                    "pattern"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/Float"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        }
      }
    },
    "/soundalike": {
      "post": {
        "description": "Soundalike",
        "operationId": "soundalike",
        "summary": "Soundalike",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "text1",
                "text2"
              ],
              "properties": {
                "algorithm": {
                  "enum": [
                    "SoundEx",
                    "Metaphone",
                    "DoubleMetaphone"
                  ]
                },
                "text1": {
                  "$ref": "#/definitions/Text"
                },
                "text2": {
                  "$ref": "#/definitions/Text"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/pluralize": {
      "post": {
        "description": "Pluralize",
        "operationId": "pluralize",
        "summary": "Pluralize",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["tokens"],
              "properties": {
                "tokens": {
                  "$ref": "#/definitions/Array Of Strings"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/singularize": {
      "post": {
        "description": "Singularize",
        "operationId": "singularize",
        "summary": "Singularize",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["tokens"],
              "properties": {
                "tokens": {
                  "$ref": "#/definitions/Array Of Strings"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/distance": {
      "post": {
        "description": "Distance",
        "operationId": "distance",
        "summary": "Distance",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["text1", "text2"],
              "properties": {
                "metric": {
                  "enum": [
                    "DamerauLevenshteinDistance",
                    "DiceCoefficient",
                    "JaroWinklerDistance",
                    "LevensteinDistance"
                  ]
                },
                "text1": {
                  "$ref": "#/definitions/Text"
                },
                "text2": {
                  "$ref": "#/definitions/Text"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Float"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/match": {
      "post": {
        "description": "Match",
        "operationId": "match",
        "summary": "Match",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["text1", "text2"],
              "properties": {
                "text1": {
                  "$ref": "#/definitions/Text"
                },
                "text2": {
                  "$ref": "#/definitions/Text"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "substring": {
                  "type": "string"
                },
                "distance": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/tag": {
      "post": {
        "description": "Tag",
        "operationId": "tag",
        "summary": "Tag",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": ["tokens"],
              "properties": {
                "tokens": {
                  "$ref": "#/definitions/Array Of Strings"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    },
    "/stem": {
      "post": {
        "description": "Stem",
        "operationId": "stem",
        "summary": "Stem",
        "tags": [
          "nlp",
          "natural"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "tokens"
              ],
              "properties": {
                "stemmer": {
                  "enum": [
                    null,
                    "LancasterStemmer",
                    "PorterStemmer"
                  ]
                },
                "tokens": {
                  "$ref": "#/definitions/Array Of Strings"
                }
              }
            }
          }
        ],
        "consumes": ["application/json"],
        "responses": {
          "200": {
            "$ref": "#/responses/Array Of Strings"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "502": {
            "$ref": "#/responses/Error"
          },
          "503": {
            "$ref": "#/responses/Error"
          }
        },
        "produces": [
          "application/json",
          "text/plain"
        ]
      }
    }
  },
  "definitions": {
    "Error": {
      "minLength": 1,
      "example": "something went wrong",
      "type": "string",
      "title": "Error Response"
    },
    "Text": {
      "type": "string",
      "minLength": 1,
      "example": "During the Second World War, Turing worked for the Government Code and Cypher School (GC&CS) at Bletchley Park, Britain's codebreaking centre that produced Ultra intelligence. For a time he led Hut 8, the section that was responsible for German naval cryptanalysis. Here, he devised a number of techniques for speeding the breaking of German ciphers, including improvements to the pre-war Polish bombe method, an electromechanical machine that could find settings for the Enigma machine."
    },
    "Number": {
      "type": "number"
    },
    "Float": {
      "type": "number",
      "format": "float"
    },
    "Int": {
      "type": "number",
      "format": "int64"
    },
    "Compromise Request Body": {
      "required": [
        "text",
        "type"
      ],
      "example": {
        "text": "Mr Turning was a very good student.",
        "type": "people"
      },
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "text": {
          "maxLength": 100000,
          "type": "string",
          "minLength": 1
        },
        "type": {
          "type": "string",
          "enum": [
            "abbreviations",
            "acronyms",
            "adverbs",
            "atMentions",
            "clauses",
            "conjunctions",
            "contractions",
            "emails",
            "hashTags",
            "hyphenated",
            "lists",
            "money",
            "nouns",
            "numbers",
            "organizations",
            "parenthesis",
            "people",
            "phoneNumbers",
            "places",
            "possessives",
            "prepositions",
            "pronouns",
            "quotations",
            "terms",
            "topics",
            "urls",
            "verbs"
          ]
        }
      }
    },
    "Array Of Strings": {
      "title": "Array of Strings",
      "type": "array",
      "example": [
        "mary",
        "susan",
        "annie"
      ],
      "items": {
        "type": "string",
        "minLength": 1
      }
    },
    "Regex Request Body": {
      "required": [
        "text",
        "regex"
      ],
      "type": "object",
      "additionalProperties": false,
      "example": {
        "text": "abaddb aba ab",
        "regex": "a+",
        "flags": "i"
      },
      "properties": {
        "text": {
          "maxLength": 100000,
          "type": "string",
          "minLength": 1
        },
        "regex": {
          "minLength": 1,
          "type": "string"
        },
        "flags": {
          "type": "string",
          "minLength": 1,
          "pattern": "[a-z]+",
          "uniqueItems": true
        }
      }
    },
    "Regex Response Body": {
      "type": "array",
      "example": [
        "a",
        "b",
        "c"
      ],
      "items": {
        "type": "string"
      }
    },
    "Counts Response Body": {
      "type": "object",
      "example": {
        "a": 22,
        "b": 44
      },
      "additionalProperties": true,
      "properties": {}
    }
  },
  "tags": [
    {
      "name": "nlp",
      "description": "nlp"
    }
  ]
}
